# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#####################hydra-fuzz###################
import("//build/config/features.gni")
import("//build/ohos.gni")
import("//build/test.gni")
import("//foundation/ability/dmsfwk/dmsfwk.gni")
ohos_fuzztest("MultiUserManagerFuzzTest") {
  module_out_path = module_output_path

  visibility = [ ":*" ]
  include_dirs = [
    "${dms_path}/services/dtbschedmgr/include",
    "${dms_path}/services/dtbschedmgr/include/continue",
    "${dms_path}/services/dtbschedmgr/include/deviceManager",
    "${dms_path}/services/dtbschedmgr/include/continue/state",
    "${dms_path}/services/dtbschedmgr/include/continue/state/source_state",
    "${dms_path}/services/dtbschedmgr/include/continue/state/sink_state",
    "${dms_path}/services/dtbschedmgr/include/distributedWant",
    "${dms_path}/services/dtbschedmgr/include/softbus_adapter/transport",
    "${dms_path}/services/dtbschedmgr/test/unittest",
    "${dms_path}/common/include",
    "${dms_path}/interfaces/innerkits/distributed_event/include",
    "${dms_path}/interfaces/innerkits/tests",
    "${dms_path}/test/fuzztest/multiusermanager_fuzzer",
    "${dms_path}/interfaces/innerkits/common/include",
  ]

  fuzz_config_file = "${dms_path}/test/fuzztest/multiusermanager_fuzzer"

  configs = [ "${dms_path}/services/dtbschedmgr/test/resource:coverage_flags" ]

  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
    "-Dprivate=public",
  ]

  sources = [ "multiusermanager_fuzzer.cpp" ]

  deps = [ "${dms_path}/services/dtbschedmgr:distributedschedsvr" ]

  if (dmsfwk_report_memmgr || dmsfwk_report_memmgr_plugins) {
    defines = [ "SUPPORT_DISTRIBUTEDCOMPONENT_TO_MEMMGR" ]
  }

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "ability_runtime:mission_info",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokensetproc_shared",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "device_auth:deviceauth_sdk",
    "device_info_manager:distributed_device_profile_common",
    "device_info_manager:distributed_device_profile_sdk",
    "device_manager:devicemanagersdk",
    "device_security_level:dslm_sdk",
    "distributed_bundle_framework:dbms_fwk",
    "dsoftbus:softbus_client",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "hitrace:libhitracechain",
    "init:libbegetutil",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "os_account:libaccountkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "wifi:wifi_sdk",
    "window_manager:libwsutils",
    "window_manager:scene_session",
    "window_manager:session_manager_lite",
  ]
  if (os_account_part) {
    external_deps += [ "os_account:os_account_innerkits" ]
  }

  if (dmsfwk_report_memmgr) {
    external_deps += [ "memmgr:memmgrclient" ]
  }

  if (dmsfwk_report_memmgr_plugins) {
    external_deps += [ "memmgr_override:memmgrclient" ]
  }

  if (dmsfwk_standard_form_share) {
    external_deps += [ "form_fwk:form_manager" ]
  }

  if (dmsfwk_mission_manager) {
    external_deps += [ "image_framework:image_native" ]
  }

  if (efficiency_manager_service_enable) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
  }

  if (dmsfwk_ces_listener) {
    external_deps += [ "common_event_service:cesfwk_innerkits" ]
  }

  if (dmsfwk_mmi_listener) {
    external_deps += [ "input:libmmi-client" ]
  }
}

group("fuzztest") {
  testonly = true
  deps = [ ":MultiUserManagerFuzzTest" ]
}
