# Copyright (c) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import("//build/test.gni")
import("//foundation/distributedschedule/dmsfwk/dmsfwk.gni")

module_output_path = "dmsfwk_standard/distributedschedsvrtest"

distributed_service = "//foundation/distributedschedule/dmsfwk/services"

dsched_configs =
    [ "${distributed_service}/dtbschedmgr:distributed_sched_config" ]

config("test_config") {
  visibility = [ ":*" ]
  include_dirs =
      [ "//foundation/distributedschedule/dmsfwk/utils/native/include" ]
}

dsched_external_deps = [
  "ability_base:want",
  "ability_runtime:ability_manager",
  "access_token:libaccesstoken_sdk",
  "bundle_framework:appexecfwk_base",
  "bundle_framework:appexecfwk_core",
  "deviceauth_standard:deviceauth_sdk",
  "distributeddatamgr:distributeddata_inner",
  "dsoftbus_standard:softbus_client",
  "eventhandler:libeventhandler",
  "hiviewdfx_hilog_native:libhilog",
  "ipc:ipc_core",
  "os_account_standard:os_account_innerkits",
  "safwk:system_ability_fwk",
  "samgr_standard:samgr_proxy",
  "utils_base:utils",
]

if (dmsfwk_standard_mission_manager) {
  dsched_external_deps += [ "multimedia_image_standard:image_native" ]
}

dsched_public_deps = [
  "//third_party/googletest:gtest_main",
  "//third_party/libxml2:libxml2",
]

dtbschedmgr_sources = [
  "${distributed_service}/dtbschedmgr/src/ability_connection_wrapper_proxy.cpp",
  "${distributed_service}/dtbschedmgr/src/ability_connection_wrapper_stub.cpp",
  "${distributed_service}/dtbschedmgr/src/adapter/dnetwork_adapter.cpp",
  "${distributed_service}/dtbschedmgr/src/bundle/bundle_manager_internal.cpp",
  "${distributed_service}/dtbschedmgr/src/connect_death_recipient.cpp",
  "${distributed_service}/dtbschedmgr/src/deviceManager/dms_device_info.cpp",
  "${distributed_service}/dtbschedmgr/src/distributed_device_node_listener.cpp",
  "${distributed_service}/dtbschedmgr/src/distributed_sched_adapter.cpp",
  "${distributed_service}/dtbschedmgr/src/distributed_sched_continuation.cpp",
  "${distributed_service}/dtbschedmgr/src/distributed_sched_dumper.cpp",
  "${distributed_service}/dtbschedmgr/src/distributed_sched_permission.cpp",
  "${distributed_service}/dtbschedmgr/src/distributed_sched_proxy.cpp",
  "${distributed_service}/dtbschedmgr/src/distributed_sched_service.cpp",
  "${distributed_service}/dtbschedmgr/src/distributed_sched_stub.cpp",
  "${distributed_service}/dtbschedmgr/src/dtbschedmgr_device_info_storage.cpp",
]

if (dmsfwk_standard_mission_manager) {
  dtbschedmgr_sources += [
    "${distributed_service}/dtbschedmgr/src/mission/distributed_data_change_listener.cpp",
    "${distributed_service}/dtbschedmgr/src/mission/distributed_data_storage.cpp",
    "${distributed_service}/dtbschedmgr/src/mission/distributed_mission_change_listener.cpp",
    "${distributed_service}/dtbschedmgr/src/mission/distributed_mission_info.cpp",
    "${distributed_service}/dtbschedmgr/src/mission/distributed_sched_mission_manager.cpp",
    "${distributed_service}/dtbschedmgr/src/mission/kvstore_death_recipient.cpp",
    "${distributed_service}/dtbschedmgr/src/mission/mission_changed_notify.cpp",
    "${distributed_service}/dtbschedmgr/src/mission/mission_info_converter.cpp",
    "${distributed_service}/dtbschedmgr/src/mission/snapshot.cpp",
    "${distributed_service}/dtbschedmgr/src/mission/snapshot_converter.cpp",
  ]
}

ohos_unittest("distributedschedsvrtest") {
  module_out_path = module_output_path

  sources = [ "unittest/distributed_sched_service_test.cpp" ]
  sources += dtbschedmgr_sources
  configs = [ ":test_config" ]
  configs += dsched_configs
  if (is_standard_system) {
    external_deps = dsched_external_deps
    public_deps = dsched_public_deps
  }
  part_name = "dmsfwk_standard"
  subsystem_name = "distributedschedule"
}

ohos_unittest("dschedcontinuetest") {
  module_out_path = module_output_path

  sources = [
    "unittest/distributed_sched_continuation_test.cpp",
    "unittest/mock_distributed_sched.cpp",
  ]
  sources += dtbschedmgr_sources
  configs = [ ":test_config" ]
  configs += dsched_configs
  if (is_standard_system) {
    external_deps = dsched_external_deps
    public_deps = dsched_public_deps
  }

  if (dmsfwk_standard_mission_manager) {
    defines = [ "SUPPORT_DISTRIBUTED_MISSION_MANAGER" ]
  }

  part_name = "dmsfwk_standard"
  subsystem_name = "distributedschedule"
}

ohos_unittest("dschedconnecttest") {
  module_out_path = module_output_path

  sources = [ "unittest/distributed_sched_connect_test.cpp" ]
  sources += dtbschedmgr_sources
  configs = [ ":test_config" ]
  configs += dsched_configs
  if (is_standard_system) {
    external_deps = dsched_external_deps
    public_deps = dsched_public_deps
  }
  part_name = "dmsfwk_standard"
  subsystem_name = "distributedschedule"
}

ohos_unittest("dschedpermissiontest") {
  module_out_path = module_output_path

  sources = [ "unittest/distributed_sched_permission_test.cpp" ]
  sources += dtbschedmgr_sources
  configs = [ ":test_config" ]
  configs += dsched_configs
  if (is_standard_system) {
    external_deps = dsched_external_deps
    public_deps = dsched_public_deps
  }
  part_name = "dmsfwk_standard"
  subsystem_name = "distributedschedule"
}

ohos_unittest("dschedmissionmanagertest") {
  module_out_path = module_output_path
  sources = [ "unittest/mission/dms_mission_manager_test.cpp" ]
  sources += dtbschedmgr_sources
  configs = [ ":test_config" ]
  configs += dsched_configs
  deps = [ "${distributed_service}/dtbschedmgr:distributedschedsvr" ]
  if (is_standard_system) {
    external_deps = dsched_external_deps
    public_deps = dsched_public_deps
  }
  part_name = "dmsfwk_standard"
  subsystem_name = "distributedschedule"
}

ohos_unittest("dscheddatastoragetest") {
  module_out_path = module_output_path
  sources = [ "unittest/mission/distributed_data_storage_test.cpp" ]
  sources += dtbschedmgr_sources
  configs = [ ":test_config" ]
  configs += dsched_configs
  deps = [ "${distributed_service}/dtbschedmgr:distributedschedsvr" ]
  if (is_standard_system) {
    external_deps = dsched_external_deps
    public_deps = dsched_public_deps
  }
  part_name = "dmsfwk_standard"
}

group("unittest") {
  testonly = true
  deps = [
    ":distributedschedsvrtest",
    ":dschedconnecttest",
    ":dschedcontinuetest",
  ]
  if (dmsfwk_standard_mission_manager) {
    deps += [
      ":dscheddatastoragetest",
      ":dschedmissionmanagertest",
      ":dschedpermissiontest",
    ]
  }
}
