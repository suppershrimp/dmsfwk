# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import("//foundation/ability/dmsfwk/dmsfwk.gni")

group("unittest") {
  testonly = true
  deps = [ "test:unittest" ]
}

config("distributed_sched_config") {
  visibility = [ ":*" ]
  include_dirs = [ "include" ]
  defines = []
  if (dmsfwk_mission_manager) {
    defines += [ "SUPPORT_DISTRIBUTED_MISSION_MANAGER" ]
  }
  if (dmsfwk_report_memmgr || dmsfwk_report_memmgr_plugins) {
    defines += [ "SUPPORT_DISTRIBUTEDCOMPONENT_TO_MEMMGR" ]
  }
  if (dmsfwk_standard_form_share) {
    defines += [ "SUPPORT_DISTRIBUTED_FORM_SHARE" ]
  }
  if (efficiency_manager_service_enable) {
    defines += [ "EFFICIENCY_MANAGER_ENABLE" ]
  }
}

ohos_shared_library("distributedschedsvr") {
  install_enable = true
  sources = [
    "src/ability_connection_wrapper_proxy.cpp",
    "src/ability_connection_wrapper_stub.cpp",
    "src/app_connection_stub.cpp",
    "src/bundle/bundle_manager_callback_stub.cpp",
    "src/bundle/bundle_manager_internal.cpp",
    "src/connect_death_recipient.cpp",
    "src/distributed_sched_adapter.cpp",
    "src/distributed_sched_continuation.cpp",
    "src/distributed_sched_dumper.cpp",
    "src/distributed_sched_permission.cpp",
    "src/distributed_sched_proxy.cpp",
    "src/distributed_sched_service.cpp",
    "src/distributed_sched_stub.cpp",
    "src/dms_callback_task.cpp",
    "src/dms_free_install_callback.cpp",
    "src/dms_free_install_callback_proxy.cpp",
    "src/dms_free_install_callback_stub.cpp",
    "src/dms_token_callback.cpp",
  ]

  configs = [
    ":distributed_sched_config",
    "//foundation/ability/dmsfwk/services/dtbschedmgr/test/resource:coverage_flags",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "device_auth:deviceauth_sdk",
    "device_manager:devicemanagersdk",
    "eventhandler:libeventhandler",
    "hitrace_native:hitrace_meter",
    "hitrace_native:libhitracechain",
    "hiviewdfx_hilog_native:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "kv_store:distributeddata_inner",
    "os_account:os_account_innerkits",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  if (efficiency_manager_service_enable) {
    external_deps += [ "efficiency_manager:suspend_manager_client" ]
  }

  deps = [ "//foundation/ability/dmsfwk/services/base:dmsbaseinner" ]

  if (dmsfwk_standard_form_share) {
    external_deps += [ "form_fwk:form_manager" ]
    sources += [ "src/form_mgr_death_recipient.cpp" ]
  }

  if (dmsfwk_mission_manager) {
    sources += [
      "src/mission/distributed_data_change_listener.cpp",
      "src/mission/distributed_data_storage.cpp",
      "src/mission/distributed_mission_change_listener.cpp",
      "src/mission/distributed_mission_info.cpp",
      "src/mission/distributed_sched_mission_manager.cpp",
      "src/mission/kvstore_death_recipient.cpp",
      "src/mission/mission_changed_notify.cpp",
      "src/mission/mission_info_converter.cpp",
      "src/mission/snapshot.cpp",
      "src/mission/snapshot_converter.cpp",
    ]
    external_deps += [ "multimedia_image_framework:image_native" ]
  }

  if (dmsfwk_report_memmgr) {
    external_deps += [ "memmgr:memmgrclient" ]
  }

  if (dmsfwk_report_memmgr_plugins) {
    external_deps += [ "memmgr_plugin:memmgrclient" ]
  }

  install_images = [ system_base_dir ]
  relative_install_dir = "platformsdk"
  part_name = "dmsfwk"
  subsystem_name = "ability"
}
